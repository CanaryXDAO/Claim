{"version":3,"sources":["../../src/index.ts"],"names":["chainIdToNetwork","FortmaticConnector","apiKey","chainId","Object","supportedChainIds","accounts","account","provider","fortmatic","m","Fortmatic","deactivate","AbstractConnector","emitUpdate","ConnectorEvent","emitError","emitDeactivate"],"mappings":"yLAIA,IAAMA,EAAkD,CACtD,EADsD,UAEtD,EAFsD,UAGtD,EAHsD,UAItD,GAAI,SAQOC,EAAb,Y,QAME,c,MAAcC,WAAQC,Y,OACVC,wBAAuCD,EAAjD,8BACA,cAAM,CAAEE,kBAAmB,OAA3B,MAEA,SACA,Y,CACD,C,EAZH,G,EAAA,G,6EAAA,mD,wCAuB0B,yCAGd,mBAAgCC,EAAhC,EAHc,oBAAhBC,GAKN,MAAO,CAAEC,SAAU,YAAZ,cAA0CL,QAAS,EAAnD,QAAiEI,U,OAbnE,K,iBAAA,EAAKE,U,uBACgB,0CAAyB,YAAC,4BAAIC,OAAJ,EAAIA,EAAC,SAAL,GAA1B,oBAAlBC,GACN,YAAiB,MACf,EADe,OAEf,mBAAsB,eAAtB,EAAuDX,EAAiB,EAF1E,S,sDAjBN,kEAgCI,uBAAO,eAAP,cAhCJ,iEAoCI,uBAAO,KAAP,QApCJ,iEAwCI,uBAAO,wDAGC,mBAAgCM,EAAhC,EAHR,IAxCJ,kDA8CSM,WA9CT,yB,MAiDU,K,uBAAA,4CACN,kB,GAlDJ,4C,6FAbsBC,EAAtB,Y,4BAGgBR,Q,MAAkD,CAAC,EAAD,GAAlDA,kB,6BAEZ,oB,oHALJ,WAcYS,Y,KAIR,KAAUC,IAAV,SAlBJ,E,EAAA,UAqBYC,Y,KAIR,KAAUD,IAAV,QAzBJ,E,EAAA,eA4BYE,W,KAIR,KAAUF,IAAV,WAhCJ,E,EAAA,gB","file":"static/js/13.41495c9c.chunk.js","sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n"],"sourceRoot":""}