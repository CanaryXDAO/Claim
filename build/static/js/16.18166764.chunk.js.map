{"version":3,"sources":["../../src/index.ts"],"names":["TorusConnector","chainId","initOptions","constructorOptions","loginOptions","supportedChainIds","accounts","account","provider","torus","m","Torus","AbstractConnector","emitUpdate","ConnectorEvent","emitError","emitDeactivate"],"mappings":"oKAUaA,EAAb,Y,QAQE,c,MAAcC,Y,IAASC,yBAAc,K,IAAIC,gCAAqB,K,IAAIC,0BAAe,K,OAC/E,cAAM,CAAEC,kBAAmB,OAA3B,MAEA,UACA,gBACA,uBACA,iB,CACD,C,EAfH,G,EAAA,G,6EAAA,mD,wCAwB0B,cAAiB,EAAjB,oBAAyC,mBAAgCC,EAAhC,EAAzC,oBAAhBC,GAEN,MAAO,CAAEC,SAAU,QAAZ,SAAiCD,U,OARnC,K,iBAAA,EAAKE,M,uBACY,4DAAsC,YAAC,4BAAIC,OAAJ,EAAIA,EAAC,SAAL,GAAvC,oBAAdC,G,OACN,QAAa,MAAU,EAAvB,oB,gBACM,aAAgB,EAAhB,kC,sDArBZ,kEA8BI,uBAAO,WAAP,SA9BJ,iEAkCI,uBAAO,KAAP,QAlCJ,iEAsCI,uBAAO,+CAA8C,mBAAgCL,EAAhC,EAArD,IAtCJ,6D,wBAAA,yB,MA4CU,K,uBAAA,oCACN,kB,GA7CJ,wC,OAAA,E,6FAPsBM,EAAtB,Y,4BAGgBP,Q,MAAkD,CAAC,EAAD,GAAlDA,kB,6BAEZ,oB,oHALJ,WAcYQ,Y,KAIR,KAAUC,IAAV,SAlBJ,E,EAAA,UAqBYC,Y,KAIR,KAAUD,IAAV,QAzBJ,E,EAAA,eA4BYE,W,KAIR,KAAUF,IAAV,WAhCJ,E,EAAA,gB","file":"static/js/16.18166764.chunk.js","sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n"],"sourceRoot":""}