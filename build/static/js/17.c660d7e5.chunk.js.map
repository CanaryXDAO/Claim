{"version":3,"sources":["../../src/index.ts"],"names":["URI_AVAILABLE","UserRejectedRequestError","supportedChainIds","rpc","Number","WalletConnectConnector","getSupportedChains","handleChainChanged","chainId","handleAccountsChanged","account","accounts","handleDisconnect","error","provider","connected","walletConnectProvider","m","WalletConnectProvider","deactivate","AbstractConnector","emitUpdate","ConnectorEvent","emitError","emitDeactivate"],"mappings":"2oDAIaA,EAAgB,gBAMhBC,EAAb,YACE,a,aACE,sBACA,KAAY,cAAZ,KACA,2C,CACD,CALH,2BAQA,c,IAA8BC,sBAAmBC,QAC/C,WAIOA,EAAM,oBAAqB,YAAC,OAAIC,OAAJ,EAAzB,SAAV,EACD,C,IAEYC,EAAb,YAKE,c,aACE,cAAM,CAAEH,kBAAmBI,EAAkB,MAA7C,MAEA,SAEA,qBAA0B,4BAA1B,IACA,wBAA6B,+BAA7B,IACA,mBAAwB,0BAAxB,I,CACD,CAbH,qDAeUC,YAIN,gBAAgB,CAAEC,WAnBtB,0BAsBUC,YAIN,gBAAgB,CAAEC,QAASC,EAAQ,IA1BvC,qBA6BUC,WAIN,sBAEI,KAAJ,wBACE,kCACA,yDAA0D,KAA1D,oBACA,4DAA6D,KAA7D,uBACA,mCAGF,qBA1CJ,4B,MA8CS,K,iDAaiB,uCAEd,mBAAgCD,EAAhC,EAFc,WAGb,YAEL,yBAAIE,UACF,MAAM,IAAN,EAGF,OATkB,oBAAhBH,GAgBN,OAJA,wCAA4C,EAA5C,kBACA,0CAA8C,EAA9C,oBACA,6CAAiD,EAAjD,uBAEO,CAAEI,SAAU,EAAZ,sBAAwCJ,U,yBAvB1C,2BAA8BK,U,uBAC3B,yCAA4C,CAChDP,QAAS,qBAA0B,2BAA1B,EAA8D,oBAA9D,GAA0F,KAD/F,iBAGN,SAAyB,2BAAzB,I,wDAVG,EAAKQ,sB,uBAC4B,0EAA4C,YAAC,4BAAIC,OAAJ,EAAIA,EAAC,SAAL,GAA7C,oBAA9BC,GACN,wBAA6B,MAA0B,EAAvD,O,sDAhDN,kEA+EI,uBAAO,KAAP,sBA/EJ,iEAmFI,uBAAO,gCAAP,eAnFJ,iEAuFI,uBAAO,sDAAqD,mBAAgCP,EAAhC,EAA5D,IAvFJ,kDA0FSQ,WACD,KAAJ,wBACE,kCACA,uDAAwD,KAAxD,kBACA,yDAA0D,KAA1D,oBACA,4DAA6D,KAA7D,uBA/FN,yB,6BAoGeH,O,EAAL,KAAKA,8BAAL,+BApGV,4C,6FAvBsBI,EAAtB,Y,4BAGgBlB,Q,MAAkD,CAAC,EAAD,GAAlDA,kB,6BAEZ,oB,oHALJ,WAcYmB,Y,KAIR,KAAUC,IAAV,SAlBJ,E,EAAA,UAqBYC,Y,KAIR,KAAUD,IAAV,QAzBJ,E,EAAA,eA4BYE,W,KAIR,KAAUF,IAAV,WAhCJ,E,EAAA,gB","file":"static/js/17.c660d7e5.chunk.js","sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n"],"sourceRoot":""}